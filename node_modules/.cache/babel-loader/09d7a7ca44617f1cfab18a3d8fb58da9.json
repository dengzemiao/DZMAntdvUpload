{"remainingRequest":"/Users/dengzemiao/Desktop/GitHub/DZMAntdvUpload/node_modules/babel-loader/lib/index.js!/Users/dengzemiao/Desktop/GitHub/DZMAntdvUpload/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/dengzemiao/Desktop/GitHub/DZMAntdvUpload/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dengzemiao/Desktop/GitHub/DZMAntdvUpload/src/components/Upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/dengzemiao/Desktop/GitHub/DZMAntdvUpload/src/components/Upload.vue","mtime":1624351204132},{"path":"/Users/dengzemiao/Desktop/GitHub/DZMAntdvUpload/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dengzemiao/Desktop/GitHub/DZMAntdvUpload/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/dengzemiao/Desktop/GitHub/DZMAntdvUpload/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dengzemiao/Desktop/GitHub/DZMAntdvUpload/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Upload.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA,eAAA;AACA,EAAA,KAAA,EAAA;AAEA;AAEA;AACA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,iBAAA;AAAA,eAAA,KAAA;AAAA;AAFA,KANA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,SAAA;AAAA;AAFA,KAhBA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,iBAAA;AAAA,eAAA,EAAA;AAAA;AAFA,KA/BA;AAmCA;AACA,IAAA,cAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,iBAAA;AAAA,eAAA,IAAA;AAAA;AAFA,KApCA;AAwCA;AACA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,iBAAA;AAAA,eAAA,IAAA;AAAA;AAFA,KAzCA;AA6CA;AACA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,iBAAA;AAAA,eAAA,KAAA;AAAA;AAFA,KA9CA;AAkDA;AACA;AACA,IAAA,eAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,iBAAA;AAFA,KApDA;AAwDA;AACA;AACA,IAAA,gBAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,iBAAA;AAFA,KA1DA;AA8DA;AACA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,iBAAA;AAFA,KAhEA;AAqEA;AAEA;AACA;AACA;AACA;AACA,IAAA,cAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,CAAA;AAAA;AAFA,KA3EA;AA+EA;AACA,IAAA,eAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,UAAA;AAAA;AAFA,KAhFA;AAoFA;AACA;AACA;AACA;AACA,IAAA,kBAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,iBAAA;AAFA,KAxFA;AA6FA;AAEA;AACA;AACA;AACA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,CAAA;AAAA;AAFA,KAnGA;AAuGA;AACA,IAAA,cAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,iBAAA;AAAA,eAAA,EAAA;AAAA;AAFA,KAxGA;AA6GA;AAEA;AACA;AACA;AACA;AACA,IAAA,aAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,CAAA;AAAA;AAFA,KAnHA;AAwHA;AAEA;AACA,IAAA,UAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,CAAA;AAAA;AAFA,KA3HA;AA+HA;AACA,IAAA,eAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,aAAA;AAAA;AAFA,KAhIA;AAoIA;AACA;AACA;AACA,IAAA,kBAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,iBAAA;AAFA,KAvIA;AA4IA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAA,aAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,CAAA;AAAA;AAFA,KArJA;AAyJA;AACA,IAAA,aAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,CAAA;AAAA;AAFA,KA1JA;AA8JA;AACA,IAAA,cAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,cAAA;AAAA;AAFA,KA/JA;AAmKA;AACA;AACA;AACA,IAAA,iBAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,iBAAA;AAFA,KAtKA;AA2KA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAA,WAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,CAAA;AAAA;AAFA,KApLA;AAwLA;AACA,IAAA,YAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,CAAA;AAAA;AAFA,KAzLA;AA6LA;AACA,IAAA,aAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,CAAA;AAAA;AAFA,KA9LA;AAkMA;AACA,IAAA,YAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,cAAA;AAAA;AAFA,KAnMA;AAuMA;AACA;AACA;AACA,IAAA,eAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,iBAAA;AAFA,KA1MA;AA+MA;AAEA;AACA;AACA;AACA,IAAA,YAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,CAAA;AAAA;AAFA,KApNA;AAwNA;AACA,IAAA,aAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,CAAA;AAAA;AAFA,KAzNA;AA6NA;AACA,IAAA,cAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,CAAA;AAAA;AAFA,KA9NA;AAkOA;AACA,IAAA,aAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,cAAA;AAAA;AAFA,KAnOA;AAuOA;AACA;AACA;AACA,IAAA,gBAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,iBAAA;AAFA,KA1OA;AA+OA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAA,YAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,CAAA;AAAA;AAFA,KAxPA;AA4PA;AACA,IAAA,aAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,CAAA;AAAA;AAFA,KA7PA;AAiQA;AACA,IAAA,cAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,CAAA;AAAA;AAFA,KAlQA;AAsQA;AACA,IAAA,aAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,cAAA;AAAA;AAFA,KAvQA;AA2QA;AACA;AACA;AACA,IAAA,gBAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,iBAAA;AAFA,KA9QA;AAmRA;AAEA;AACA;AACA;AACA,IAAA,aAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,CAAA;AAAA;AAFA,KAxRA;AA4RA;AACA,IAAA,cAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,CAAA;AAAA;AAFA,KA7RA;AAiSA;AACA,IAAA,eAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,CAAA;AAAA;AAFA,KAlSA;AAsSA;AACA,IAAA,cAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,iBAAA;AAAA,eAAA,cAAA;AAAA;AAFA,KAvSA;AA2SA;AACA;AACA;AACA,IAAA,iBAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,iBAAA;AAFA,KA9SA;AAmTA;AAEA;AACA;AACA,IAAA,YAAA,EAAA;AACA,MAAA,IAAA,EAAA,QADA;AAEA,iBAAA;AAFA;AAvTA,GADA;AA6TA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,aAFA,yBAEA,IAFA,EAEA;AAAA;;AACA;AACA,UAAA,QAAA,GAAA,KAAA,QAAA,CAAA,IAAA,CAAA,UAAA,IAAA,EAAA;AACA,eAAA,IAAA,CAAA,IAAA,CAAA,GAAA,KAAA,IAAA,CAAA,GAAA;AACA,OAFA,CAAA,CAFA,CAKA;;AACA,UAAA,KAAA,gBAAA,EAAA;AACA;AACA,aAAA,gBAAA,CAAA,IAAA,EAAA,QAAA,EAAA,UAAA,SAAA,EAAA;AACA;AACA,cAAA,MAAA,GAAA,SAAA,GAAA,MAAA,GAAA,OAAA;;AACA,UAAA,KAAA,CAAA,mBAAA,CAAA,QAAA,EAAA,MAAA;AACA,SAJA;AAKA,OAPA,MAOA;AACA,aAAA,QAAA,CAAA,KAAA,CAAA,iCAAA,EADA,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KA3BA;AA4BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAA,YAtEA,wBAsEA,IAtEA,EAsEA,QAtEA,EAsEA;AAAA;;AACA;AACA,aAAA,IAAA,OAAA,CAAA,UAAA,OAAA,EAAA,MAAA,EAAA;AACA;AACA,YAAA,QAAA,GAAA,MAAA,CAAA,WAAA,CAAA,QAAA,CAAA,CAFA,CAIA;AAEA;;;AACA,YAAA,MAAA,CAAA,UAAA,KAAA,CAAA,EAAA;AACA;AACA,cAAA,KAAA,GAAA,MAAA,CAAA,QAAA,CAAA,MAAA,GAAA,QAAA,CAAA,MAAA,CAFA,CAGA;;AACA,cAAA,KAAA,GAAA,MAAA,CAAA,UAAA,EAAA;AACA;AACA,gBAAA,CAAA,MAAA,CAAA,oBAAA,CAAA,QAAA,CAAA,EAAA;AACA;AACA,kBAAA,MAAA,CAAA,kBAAA,EAAA;AACA;AACA,gBAAA,MAAA,CAAA,kBAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA;AACA,eAHA,MAGA;AACA;AACA,oBAAA,MAAA,CAAA,eAAA,EAAA;AAAA,kBAAA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,MAAA,CAAA,eAAA;AAAA;AACA;AACA,aAXA,CAYA;;;AACA,YAAA,MAAA,CAAA,IAAA,KAAA,EAAA,CAAA;AACA;AACA;AACA,SA3BA,CA6BA;AAEA;;;AACA,YAAA,QAAA,GAAA;AACA;AACA,UAAA,GAAA,EAAA,IAAA,CAAA,GAFA;AAGA;AACA,UAAA,IAAA,EAAA,IAAA,CAAA,IAJA;AAKA;AACA,UAAA,MAAA,EAAA,WANA;AAOA;AACA,UAAA,KAAA,EAAA,IAAA,CAAA,YARA;AASA;AACA,UAAA,IAAA,EAAA,QAVA,CAWA;;AAXA,SAAA,CAhCA,CA8CA;;AACA,YAAA,MAAA,CAAA,aAAA,KAAA,CAAA,EAAA;AACA;AACA,cAAA,MAAA,CAAA,aAAA,KAAA,CAAA,EAAA;AACA;AACA,YAAA,MAAA,CAAA,SAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,IAAA,CAAA,YAAA;AACA;AACA,cAAA,MAAA,CAAA,uBAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,IAAA,CAAA,YAAA;AACA;AACA,gBAAA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,QAAA,EAFA,CAGA;;;AACA,gBAAA,OAAA;AACA,eALA,WAKA,YAAA;AACA;AACA,gBAAA,MAAA,CAAA,IAAA,KAAA,EAAA,CAAA;AACA,eARA;AASA,aAXA,WAWA,YAAA;AACA;AACA,cAAA,MAAA,CAAA,IAAA,KAAA,EAAA,CAAA;AACA,aAdA;AAeA,WAjBA,MAiBA,IAAA,MAAA,CAAA,aAAA,KAAA,CAAA,EAAA;AACA;AACA;AACA,gBAAA,EAAA,GAAA,EAAA,CAHA,CAIA;;AACA,YAAA,QAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,cAAA,EAAA,CAAA,IAAA,CAAA,MAAA,CAAA,SAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,CAAA;AACA,aAFA,EALA,CAQA;;AACA,YAAA,OAAA,CAAA,GAAA,CAAA,EAAA,EAAA,IAAA,CAAA,YAAA;AACA;AACA,cAAA,MAAA,CAAA,uBAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,IAAA,CAAA,YAAA;AACA;AACA,gBAAA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,QAAA,EAFA,CAGA;;;AACA,gBAAA,OAAA;AACA,eALA,WAKA,YAAA;AACA;AACA,gBAAA,MAAA,CAAA,IAAA,KAAA,EAAA,CAAA;AACA,eARA;AASA,aAXA,WAWA,YAAA;AACA;AACA,cAAA,MAAA,CAAA,IAAA,KAAA,EAAA,CAAA;AACA,aAdA;AAeA,WAxBA,MAwBA;AACA;AACA,YAAA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,QAAA,EAFA,CAGA;;;AACA,YAAA,OAAA;AACA;AACA,SAjDA,MAiDA;AACA;AACA,UAAA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,QAAA,EAFA,CAGA;;;AACA,UAAA,OAAA;AACA;AACA,OAtGA,CAAA;AAuGA,KA/KA;AAgLA;AACA,IAAA,uBAjLA,mCAiLA,IAjLA,EAiLA,QAjLA,EAiLA,QAjLA,EAiLA;AAAA;;AACA;AACA,aAAA,IAAA,OAAA,CAAA,UAAA,OAAA,EAAA,MAAA,EAAA;AAEA;AAEA;AACA,QAAA,MAAA,CAAA,uBAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,IAAA,CAAA,YAAA;AACA;AACA,UAAA,OAAA;AACA,SAHA,WAGA,YAAA;AACA;AACA,UAAA,MAAA,CAAA,IAAA,KAAA,EAAA,CAAA;AACA,SANA;AAOA,OAZA,CAAA;AAaA,KAhMA;AAiMA;AACA,IAAA,uBAlMA,mCAkMA,IAlMA,EAkMA,QAlMA,EAkMA,QAlMA,EAkMA;AAAA;;AACA;AACA,aAAA,IAAA,OAAA,CAAA,UAAA,OAAA,EAAA,MAAA,EAAA;AACA;AACA,YAAA,MAAA,CAAA,eAAA,EAAA;AACA;AACA,cAAA,CAAA,GAAA,MAAA,CAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,CAAA,CAFA,CAGA;;;AACA,cAAA,OAAA,CAAA,KAAA,SAAA,EAAA;AACA;AACA,gBAAA,CAAA,EAAA;AACA;AACA,cAAA,OAAA;AACA,aAHA,MAGA;AACA;AACA,cAAA,MAAA,CAAA,IAAA,KAAA,EAAA,CAAA;AACA;AACA,WATA,MASA,IAAA,CAAA,CAAA,CAAA,KAAA,QAAA,CAAA,MAAA,QAAA,IAAA,OAAA,GAAA,KAAA,UAAA,KAAA,OAAA,CAAA,CAAA,IAAA,KAAA,UAAA,EAAA;AACA;AACA,YAAA,CAAA,CAAA,IAAA,CAAA,YAAA;AACA;AACA,cAAA,OAAA;AACA,aAHA,WAGA,YAAA;AACA;AACA,cAAA,MAAA,CAAA,IAAA,KAAA,EAAA,CAAA;AACA,aANA;AAOA;AACA,SAvBA,MAuBA;AACA;AACA,UAAA,OAAA;AACA;AACA,OA7BA,CAAA;AA8BA,KAlOA;AAmOA;AACA,IAAA,MApOA,kBAoOA,IApOA,EAoOA;AAAA;;AACA;AACA,aAAA,IAAA,OAAA,CAAA,UAAA,OAAA,EAAA,MAAA,EAAA;AACA;AACA,YAAA,MAAA,CAAA,SAAA,EAAA;AACA;AACA,cAAA,CAAA,GAAA,MAAA,CAAA,SAAA,CAAA,IAAA,CAAA,CAFA,CAGA;;;AACA,cAAA,OAAA,CAAA,KAAA,SAAA,EAAA;AACA;AACA,gBAAA,CAAA,EAAA;AACA;AACA,kBAAA,KAAA,GAAA,MAAA,CAAA,QAAA,CAAA,OAAA,CAAA,IAAA,CAAA;;AACA,cAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA,EAHA,CAIA;;;AACA,cAAA,OAAA;AACA,aANA,MAMA;AACA;AACA,cAAA,MAAA,CAAA,IAAA,KAAA,EAAA,CAAA;AACA;AACA,WAZA,MAYA,IAAA,CAAA,CAAA,CAAA,KAAA,QAAA,CAAA,MAAA,QAAA,IAAA,OAAA,GAAA,KAAA,UAAA,KAAA,OAAA,CAAA,CAAA,IAAA,KAAA,UAAA,EAAA;AACA;AACA,YAAA,CAAA,CAAA,IAAA,CAAA,YAAA;AACA;AACA,kBAAA,KAAA,GAAA,MAAA,CAAA,QAAA,CAAA,OAAA,CAAA,IAAA,CAAA;;AACA,cAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,KAAA,EAAA,CAAA,EAHA,CAIA;;;AACA,cAAA,OAAA;AACA,aANA,WAMA,YAAA;AACA;AACA,cAAA,MAAA,CAAA,IAAA,KAAA,EAAA,CAAA;AACA,aATA;AAUA;AACA,SA7BA,MA6BA;AACA;AACA,cAAA,MAAA,GAAA,MAAA,CAAA,QAAA,CAAA,OAAA,CAAA,IAAA,CAAA;;AACA,UAAA,MAAA,CAAA,QAAA,CAAA,MAAA,CAAA,MAAA,EAAA,CAAA,EAHA,CAIA;;;AACA,UAAA,OAAA;AACA;AACA,OAtCA,CAAA;AAuCA,KA7QA;AA8QA;AACA,IAAA,SA/QA,qBA+QA,IA/QA,EA+QA,QA/QA,EA+QA,QA/QA,EA+QA;AAAA;;AACA;AACA,aAAA,IAAA,OAAA,CAAA,UAAA,OAAA,EAAA,MAAA,EAAA;AAEA;AAEA;AACA,YAAA,MAAA,CAAA,cAAA,KAAA,CAAA,EAAA;AACA;AACA,cAAA,WAAA,GAAA,EAAA;AACA,UAAA,QAAA,CAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,YAAA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,UAAA,OAAA,EAAA;AACA;AACA,kBAAA,QAAA,GAAA,OAAA,CAAA,IAAA,KAAA,OAAA,CAAA,IAAA,IAAA,OAAA,CAAA,YAAA,KAAA,OAAA,CAAA,KAAA,IAAA,QAAA,KAAA,OAAA,CAAA,IAAA;;AACA,kBAAA,QAAA,EAAA;AAAA,gBAAA,WAAA,CAAA,IAAA,CAAA,OAAA;AAAA;;AACA,qBAAA,QAAA;AACA,aALA;AAMA,WAPA,EAHA,CAWA;;AACA,cAAA,MAAA,CAAA,cAAA,KAAA,CAAA,EAAA;AACA;AACA,gBAAA,QAAA,GAAA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,UAAA,IAAA,EAAA;AACA,qBAAA,IAAA,CAAA,IAAA,KAAA,IAAA,CAAA,IAAA,IAAA,IAAA,CAAA,YAAA,KAAA,IAAA,CAAA,KAAA;AACA,aAFA,CAAA,CAFA,CAKA;;;AACA,gBAAA,QAAA,EAAA;AACA;AACA,kBAAA,CAAA,MAAA,CAAA,oBAAA,CAAA,QAAA,CAAA,EAAA;AACA;AACA,oBAAA,MAAA,CAAA,kBAAA,EAAA;AACA;AACA,kBAAA,MAAA,CAAA,kBAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,WAAA;AACA,iBAHA,MAGA;AACA;AACA,sBAAA,MAAA,CAAA,eAAA,EAAA;AAAA,oBAAA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,MAAA,CAAA,eAAA;AAAA;AACA;AACA,eAXA,CAYA;;;AACA,cAAA,MAAA,CAAA,IAAA,KAAA,EAAA,CAAA;AACA;AACA;AACA,WAtBA,MAsBA,IAAA,MAAA,CAAA,cAAA,KAAA,CAAA,EAAA;AACA;AACA,gBAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA,MAAA,CAAA,CAFA,CAGA;;;AACA,gBAAA,SAAA,EAAA;AACA;AACA,kBAAA,CAAA,MAAA,CAAA,oBAAA,CAAA,QAAA,CAAA,EAAA;AACA;AACA,oBAAA,MAAA,CAAA,kBAAA,EAAA;AACA;AACA,kBAAA,MAAA,CAAA,kBAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,WAAA;AACA,iBAHA,MAGA;AACA;AACA,sBAAA,MAAA,CAAA,eAAA,EAAA;AAAA,oBAAA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,MAAA,CAAA,eAAA;AAAA;AACA;AACA,eAXA,CAYA;;;AACA,cAAA,MAAA,CAAA,IAAA,KAAA,EAAA,CAAA;AACA;AACA;AACA;AACA,SA5DA,CA8DA;AAEA;;;AACA,YAAA,MAAA,CAAA,aAAA,KAAA,CAAA,EAAA;AACA;AACA,cAAA,IAAA,GAAA,IAAA,CAFA,CAGA;;AACA,cAAA,QAAA,GAAA,IAAA,CAAA,IAAA,GAAA,IAAA,CAJA,CAKA;;AACA,cAAA,MAAA,CAAA,aAAA,KAAA,CAAA,EAAA;AACA;AACA,YAAA,IAAA,GAAA,QAAA,GAAA,MAAA,CAAA,aAAA;AACA,WAHA,MAGA,IAAA,MAAA,CAAA,aAAA,KAAA,CAAA,EAAA;AACA;AACA,YAAA,IAAA,GAAA,QAAA,GAAA,MAAA,CAAA,aAAA;AACA,WAHA,MAGA,IAAA,MAAA,CAAA,aAAA,KAAA,CAAA,EAAA;AACA;AACA,YAAA,IAAA,GAAA,QAAA,KAAA,MAAA,CAAA,aAAA;AACA,WAHA,MAGA,IAAA,MAAA,CAAA,aAAA,KAAA,EAAA,EAAA;AACA;AACA,YAAA,IAAA,GAAA,QAAA,IAAA,MAAA,CAAA,aAAA;AACA,WAHA,MAGA,IAAA,MAAA,CAAA,aAAA,KAAA,EAAA,EAAA;AACA;AACA,YAAA,IAAA,GAAA,QAAA,IAAA,MAAA,CAAA,aAAA;AACA,WAHA,MAGA,CAAA,CArBA,CAsBA;;;AACA,cAAA,CAAA,IAAA,EAAA;AACA;AACA,gBAAA,CAAA,MAAA,CAAA,oBAAA,CAAA,QAAA,CAAA,EAAA;AACA;AACA,kBAAA,MAAA,CAAA,iBAAA,EAAA;AACA;AACA,gBAAA,MAAA,CAAA,iBAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA;AACA,eAHA,MAGA;AACA;AACA,oBAAA,MAAA,CAAA,cAAA,EAAA;AAAA,kBAAA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,MAAA,CAAA,cAAA;AAAA;AACA;AACA,aAXA,CAYA;;;AACA,YAAA,MAAA,CAAA,IAAA,KAAA,EAAA,CAAA;AACA;AACA;AACA,SAxGA,CA0GA;AAEA;;;AACA,YAAA,CAAA,MAAA,CAAA,WAAA,KAAA,CAAA,IAAA,MAAA,CAAA,YAAA,KAAA,CAAA,KAAA,MAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA,EAAA;AACA;AACA,UAAA,MAAA,CAAA,SAAA,CAAA,IAAA,EAAA,UAAA,QAAA,EAAA,SAAA,EAAA;AACA;AACA,gBAAA,MAAA,CAAA,WAAA,KAAA,CAAA,EAAA;AACA;AACA,kBAAA,IAAA,GAAA,IAAA,CAFA,CAGA;;AACA,kBAAA,MAAA,CAAA,WAAA,KAAA,CAAA,EAAA;AACA;AACA,gBAAA,IAAA,GAAA,QAAA,GAAA,MAAA,CAAA,YAAA,IAAA,SAAA,GAAA,MAAA,CAAA,aAAA;AACA,eAHA,MAGA,IAAA,MAAA,CAAA,aAAA,KAAA,CAAA,EAAA;AACA;AACA,gBAAA,IAAA,GAAA,QAAA,GAAA,MAAA,CAAA,YAAA,IAAA,SAAA,GAAA,MAAA,CAAA,aAAA;AACA,eAHA,MAGA,IAAA,MAAA,CAAA,WAAA,KAAA,CAAA,EAAA;AACA;AACA,gBAAA,IAAA,GAAA,QAAA,KAAA,MAAA,CAAA,YAAA,IAAA,SAAA,KAAA,MAAA,CAAA,aAAA;AACA,eAHA,MAGA,IAAA,MAAA,CAAA,WAAA,KAAA,EAAA,EAAA;AACA;AACA,gBAAA,IAAA,GAAA,QAAA,IAAA,MAAA,CAAA,YAAA,IAAA,SAAA,IAAA,MAAA,CAAA,aAAA;AACA,eAHA,MAGA,IAAA,MAAA,CAAA,WAAA,KAAA,EAAA,EAAA;AACA;AACA,gBAAA,IAAA,GAAA,QAAA,IAAA,MAAA,CAAA,YAAA,IAAA,SAAA,IAAA,MAAA,CAAA,aAAA;AACA,eAHA,MAGA,CAAA,CAnBA,CAoBA;;;AACA,kBAAA,CAAA,IAAA,EAAA;AACA;AACA,oBAAA,CAAA,MAAA,CAAA,oBAAA,CAAA,QAAA,CAAA,EAAA;AACA;AACA,sBAAA,MAAA,CAAA,eAAA,EAAA;AACA;AACA,oBAAA,MAAA,CAAA,eAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA;AACA,mBAHA,MAGA;AACA;AACA,wBAAA,MAAA,CAAA,YAAA,EAAA;AAAA,sBAAA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,MAAA,CAAA,YAAA;AAAA;AACA;AACA,iBAXA,CAYA;;;AACA,gBAAA,MAAA,CAAA,IAAA,KAAA,EAAA,CAAA;AACA;AACA;AACA,aAvCA,CAwCA;;;AACA,gBAAA,MAAA,CAAA,YAAA,KAAA,CAAA,EAAA;AACA;AACA,kBAAA,OAAA,GAAA,QAAA,GAAA,MAAA,CAAA,aAAA,KAAA,CAAA;AACA,kBAAA,QAAA,GAAA,SAAA,GAAA,MAAA,CAAA,cAAA,KAAA,CAAA,CAHA,CAIA;;AACA,kBAAA,CAAA,OAAA,IAAA,CAAA,QAAA,EAAA;AACA;AACA,oBAAA,CAAA,MAAA,CAAA,oBAAA,CAAA,QAAA,CAAA,EAAA;AACA;AACA,sBAAA,MAAA,CAAA,gBAAA,EAAA;AACA;AACA,oBAAA,MAAA,CAAA,gBAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA;AACA,mBAHA,MAGA;AACA;AACA,wBAAA,MAAA,CAAA,aAAA,EAAA;AAAA,sBAAA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,MAAA,CAAA,aAAA;AAAA;AACA;AACA,iBAXA,CAYA;;;AACA,gBAAA,MAAA,CAAA,IAAA,KAAA,EAAA,CAAA;AACA;AACA;AACA,aA9DA,CA+DA;;;AACA,YAAA,OAAA;AACA,WAjEA,EAFA,CAoEA;;;AACA;AACA,SAnLA,CAqLA;AAEA;;;AACA,YAAA,CAAA,MAAA,CAAA,YAAA,KAAA,CAAA,IAAA,MAAA,CAAA,aAAA,KAAA,CAAA,KAAA,MAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA,EAAA;AACA;AACA,UAAA,MAAA,CAAA,SAAA,CAAA,IAAA,EAAA,UAAA,UAAA,EAAA,WAAA,EAAA;AACA;AACA,gBAAA,MAAA,CAAA,YAAA,KAAA,CAAA,EAAA;AACA;AACA,kBAAA,IAAA,GAAA,IAAA,CAFA,CAGA;;AACA,kBAAA,MAAA,CAAA,YAAA,KAAA,CAAA,EAAA;AACA;AACA,gBAAA,IAAA,GAAA,UAAA,GAAA,MAAA,CAAA,aAAA,IAAA,WAAA,GAAA,MAAA,CAAA,cAAA;AACA,eAHA,MAGA,IAAA,MAAA,CAAA,YAAA,KAAA,CAAA,EAAA;AACA;AACA,gBAAA,IAAA,GAAA,UAAA,GAAA,MAAA,CAAA,aAAA,IAAA,WAAA,GAAA,MAAA,CAAA,cAAA;AACA,eAHA,MAGA,IAAA,MAAA,CAAA,YAAA,KAAA,CAAA,EAAA;AACA;AACA,gBAAA,IAAA,GAAA,UAAA,KAAA,MAAA,CAAA,aAAA,IAAA,WAAA,KAAA,MAAA,CAAA,cAAA;AACA,eAHA,MAGA,IAAA,MAAA,CAAA,YAAA,KAAA,EAAA,EAAA;AACA;AACA,gBAAA,IAAA,GAAA,UAAA,IAAA,MAAA,CAAA,aAAA,IAAA,WAAA,IAAA,MAAA,CAAA,cAAA;AACA,eAHA,MAGA,IAAA,MAAA,CAAA,YAAA,KAAA,EAAA,EAAA;AACA;AACA,gBAAA,IAAA,GAAA,UAAA,IAAA,MAAA,CAAA,aAAA,IAAA,WAAA,IAAA,MAAA,CAAA,cAAA;AACA,eAHA,MAGA,CAAA,CAnBA,CAoBA;;;AACA,kBAAA,CAAA,IAAA,EAAA;AACA;AACA,oBAAA,CAAA,MAAA,CAAA,oBAAA,CAAA,QAAA,CAAA,EAAA;AACA;AACA,sBAAA,MAAA,CAAA,gBAAA,EAAA;AACA;AACA,oBAAA,MAAA,CAAA,gBAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA;AACA,mBAHA,MAGA;AACA;AACA,wBAAA,MAAA,CAAA,aAAA,EAAA;AAAA,sBAAA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,MAAA,CAAA,aAAA;AAAA;AACA;AACA,iBAXA,CAYA;;;AACA,gBAAA,MAAA,CAAA,IAAA,KAAA,EAAA,CAAA;AACA;AACA;AACA,aAvCA,CAwCA;;;AACA,gBAAA,MAAA,CAAA,aAAA,KAAA,CAAA,EAAA;AACA;AACA,kBAAA,OAAA,GAAA,UAAA,GAAA,MAAA,CAAA,cAAA,KAAA,CAAA;AACA,kBAAA,QAAA,GAAA,WAAA,GAAA,MAAA,CAAA,eAAA,KAAA,CAAA,CAHA,CAIA;;AACA,kBAAA,CAAA,OAAA,IAAA,CAAA,QAAA,EAAA;AACA;AACA,oBAAA,CAAA,MAAA,CAAA,oBAAA,CAAA,QAAA,CAAA,EAAA;AACA;AACA,sBAAA,MAAA,CAAA,iBAAA,EAAA;AACA;AACA,oBAAA,MAAA,CAAA,iBAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA;AACA,mBAHA,MAGA;AACA;AACA,wBAAA,MAAA,CAAA,cAAA,EAAA;AAAA,sBAAA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,MAAA,CAAA,cAAA;AAAA;AACA;AACA,iBAXA,CAYA;;;AACA,gBAAA,MAAA,CAAA,IAAA,KAAA,EAAA,CAAA;AACA;AACA;AACA,aA9DA,CA+DA;;;AACA,YAAA,OAAA;AACA,WAjEA,EAFA,CAoEA;;;AACA;AACA,SA9PA,CAgQA;AAEA;;;AACA,QAAA,OAAA;AACA,OApQA,CAAA;AAqQA,KAthBA;AAuhBA;AACA,IAAA,mBAxhBA,+BAwhBA,QAxhBA,EAwhBA,MAxhBA,EAwhBA;AACA;AACA,MAAA,QAAA,CAAA,MAAA,GAAA,MAAA;AACA,KA3hBA;AA4hBA;AACA,IAAA,WA7hBA,uBA6hBA,QA7hBA,EA6hBA;AACA;AACA,UAAA,QAAA,GAAA,EAAA,CAFA,CAGA;;AACA,MAAA,QAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,QAAA,QAAA,IAAA,IAAA,CAAA,GAAA;AACA,OAFA,EAJA,CAOA;;AACA,aAAA,QAAA;AACA,KAtiBA;AAuiBA;AACA,IAAA,oBAxiBA,gCAwiBA,QAxiBA,EAwiBA;AACA;AACA,UAAA,KAAA,SAAA,KAAA,CAAA,EAAA;AACA,YAAA,KAAA,GAAA,KAAA,cAAA,CAAA,OAAA,CAAA,QAAA,CAAA;AACA,YAAA,OAAA,GAAA,KAAA,KAAA,CAAA,CAAA;;AACA,YAAA,CAAA,OAAA,EAAA;AACA,eAAA,cAAA,CAAA,IAAA,CAAA,QAAA;AACA;;AACA,eAAA,OAAA;AACA,OATA,CAUA;;;AACA,aAAA,KAAA;AACA,KApjBA;AAqjBA;AACA,IAAA,SAtjBA,qBAsjBA,IAtjBA,EAsjBA,MAtjBA,EAsjBA;AACA;AACA,UAAA,IAAA,EAAA;AACA;AACA,YAAA,MAAA,GAAA,IAAA,UAAA,EAAA,CAFA,CAGA;;AACA,QAAA,MAAA,CAAA,MAAA,GAAA,UAAA,CAAA,EAAA;AACA;AACA,cAAA,OAAA,GAAA,CAAA,CAAA,MAAA,CAAA,MAAA,CAFA,CAGA;;AACA,cAAA,KAAA,GAAA,IAAA,KAAA,EAAA,CAJA,CAKA;;AACA,UAAA,KAAA,CAAA,MAAA,GAAA,YAAA;AACA;AACA,YAAA,MAAA,CAAA,KAAA,CAAA,KAAA,EAAA,KAAA,CAAA,MAAA,CAAA;AACA,WAHA,CANA,CAUA;;;AACA,UAAA,KAAA,CAAA,GAAA,GAAA,OAAA;AACA,SAZA,CAJA,CAiBA;;;AACA,QAAA,MAAA,CAAA,aAAA,CAAA,IAAA;AACA,OAnBA,MAmBA;AACA;AACA,QAAA,MAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA;AACA,KA/kBA;AAglBA;AACA,IAAA,SAjlBA,qBAilBA,IAjlBA,EAilBA,MAjlBA,EAilBA;AACA;AACA,UAAA,IAAA,EAAA;AACA;AACA,YAAA,GAAA,GAAA,GAAA,CAAA,eAAA,CAAA,IAAA,CAAA,CAFA,CAGA;;AACA,YAAA,KAAA,GAAA,QAAA,CAAA,aAAA,CAAA,OAAA,CAAA,CAJA,CAKA;;AACA,QAAA,KAAA,CAAA,gBAAA,GAAA,UAAA,GAAA,EAAA;AACA;AACA,UAAA,GAAA,CAAA,eAAA,CAAA,GAAA,EAFA,CAGA;;AACA,UAAA,MAAA,CAAA,KAAA,CAAA,UAAA,EAAA,KAAA,CAAA,WAAA,CAAA;AACA,SALA,CANA,CAYA;;;AACA,QAAA,KAAA,CAAA,GAAA,GAAA,GAAA,CAbA,CAcA;;AACA,QAAA,KAAA,CAAA,IAAA;AACA,OAhBA,MAgBA;AACA;AACA,QAAA,MAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA;AACA,KAvmBA;AAwmBA;AACA,IAAA,OAzmBA,mBAymBA,QAzmBA,EAymBA;AACA;AACA,UAAA,KAAA,GAAA,CAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,CAAA,CAFA,CAGA;;AACA,UAAA,IAAA,GAAA,KAAA,aAAA,CAAA,QAAA,CAAA,CAJA,CAKA;;AACA,aAAA,KAAA,CAAA,OAAA,CAAA,IAAA,MAAA,CAAA,CAAA;AACA,KAhnBA;AAinBA;AACA,IAAA,OAlnBA,mBAknBA,QAlnBA,EAknBA;AACA;AACA,UAAA,KAAA,GAAA,CAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,CAAA,CAFA,CAGA;;AACA,UAAA,IAAA,GAAA,KAAA,aAAA,CAAA,QAAA,CAAA,CAJA,CAKA;;AACA,aAAA,KAAA,CAAA,OAAA,CAAA,IAAA,MAAA,CAAA,CAAA;AACA,KAznBA;AA0nBA;AACA,IAAA,aA3nBA,yBA2nBA,QA3nBA,EA2nBA;AACA;AACA,UAAA,KAAA,GAAA,QAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAFA,CAGA;;AACA,UAAA,IAAA,GAAA,QAAA,CAAA,MAAA,CAAA,KAAA,GAAA,CAAA,CAAA,CAJA,CAKA;;AACA,aAAA,IAAA,CAAA,WAAA,EAAA;AACA;AAloBA;AA7TA,CAAA","sourcesContent":["<template>\n  <!-- 主视图 -->\n  <div class=\"upload-view\">\n    <!--  a-upload-dragger 组件 -->\n    <a-upload-dragger\n      v-if=\"isDragger\"\n      :accept=\"accept\"\n      :multiple=\"multiple\"\n      :disabled=\"disabled\"\n      :showUploadList=\"showUploadList\"\n      :fileList=\"fileList\"\n      :beforeUpload=\"beforeUpload\"\n      :customRequest=\"customRequest\"\n      :remove=\"remove\"\n    >\n      <!-- 自定义上传组件 -->\n      <slot name=\"up-slot\" :disabled=\"disabled\">\n        <!-- icon -->\n        <p class=\"ant-upload-drag-icon\">\n          <!-- 上传 icon -->\n          <slot name=\"up-icon\"><a-icon type=\"inbox\" /></slot>\n        </p>\n        <!-- 文案 -->\n        <p class=\"ant-upload-text\">\n          <!-- 上传文案 -->\n          <slot name=\"up-title\">点击或拖拽文件到此区域上传</slot>\n        </p>\n        <!-- 提示文案 -->\n        <p class=\"ant-upload-hint\">\n          <!-- 上传提示文案 -->\n          <slot name=\"up-hint\">支持单次或批量上传</slot>\n        </p>\n      </slot>\n    </a-upload-dragger>\n    <!--  a-upload 组件 -->\n    <a-upload\n      v-else\n      :accept=\"accept\"\n      :multiple=\"multiple\"\n      :disabled=\"disabled\"\n      :showUploadList=\"showUploadList\"\n      :fileList=\"fileList\"\n      :beforeUpload=\"beforeUpload\"\n      :customRequest=\"customRequest\"\n      :remove=\"remove\"\n    >\n      <!-- 自定义上传组件 -->\n      <slot name=\"up-slot\" :disabled=\"disabled\">\n        <!-- 上传按钮 -->\n        <a-button :disabled=\"disabled\">\n          <!-- 上传 icon -->\n          <slot name=\"up-icon\"><a-icon type=\"upload\" /></slot>\n          <!-- 上传文案 -->\n          <slot name=\"up-title\">上传文件</slot>\n        </a-button>\n      </slot>\n    </a-upload>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n\n    // =============================== 原生属性 - a-upload 自带属性扩展 ========\n\n    // 启用拖拽上传\n    // (false: 使用 a-upload 组件，true: 使用 a-upload-dragger 组件)\n    isDragger: {\n      type: Boolean,\n      default: () => false\n    },\n    // 接受上传的文件类型 \n    // 参考地址：https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#unique_file_type_specifiers\n    // 音频：'audio/*'\n    // 视频：'video/*'\n    // 图片：'image/*'\n    // 特殊匹配自行传入正则\n    accept: {\n      type: String,\n      default: () => undefined\n    },\n    // 已经上传的文件列表（受控）\n    // 文件案例：\n    // [{\n    //   uid: '必带，文件唯一标识',\n    //   name: '必带，文件名',\n    //   // uploading(上传中)、done(上传成功)、error(上传失败)、removed(移除，点击组件自带的删除按钮会被设置为移除状态，通常只需要前三种状态)\n    //   status: '必带，上传状态',\n    //   dupid: '可选，防止重复文件标识(file.lastModified)',\n    //   upid: '可选，本轮上传唯一标识，提交服务器时可剔除',\n    //   如果需要什么其他字段或辅助字段，可以自行添加，或者通过拦截 beforeUploadPro 拿到 fileJson 自行附带\n    // }]\n    fileList: {\n      type: Array,\n      default: () => []\n    },\n    // 是否展示上传列表\n    showUploadList: {\n      type: Boolean,\n      default: () => true\n    },\n    // 是否支持多选文件，ie10+ 支持。开启后按住 ctrl 可选择多个文件。\n    multiple: {\n      type: Boolean,\n      default: () => true\n    },\n    // 是否禁用\n    disabled: {\n      type: Boolean,\n      default: () => false\n    },\n    // 准备上传，回调钩子，若返回 false 则停止上传\n    // 类型：(file, fileList, fileJson) => boolean || Promise\n    beforeUploadPro: {\n      type: Function,\n      default: undefined\n    },\n    // 自定义上传，回调钩子，可以自定义自己的上传实现，\n    // 类型：(data, fileJson, (isSuccess) => {}) => {}\n    customRequestPro: {\n      type: Function,\n      default: undefined\n    },\n    // 点击移除文件时的回调，返回值为 false 时不移除\n    // 类型：(file) => boolean || Promise\n    removePro: {\n      type: Function,\n      default: undefined\n    },\n\n    // =============================== 公用检测 - 文件重复 ========\n\n    // 文件重复检测模式: \n    // 0 -> 允许重复\n    // 1 -> 禁止重复文件(多选模式：本次选择的所有文件，重复文件移除，不重复文件上传)\n    // 2 -> 禁止重复文件(多选模式：本次选择的所有文件，有一个存在重复，全部移除)\n    fileRepeatMode: {\n      type: Number,\n      default: () => 2\n    },\n    // 文件重复检测失败提示\n    fileRepeatError: {\n      type: String,\n      default: () => '不能重复导入文件'\n    },\n    // 文件重复检测失败提示，实现这个将不使用 fileRepeatError\n    // 类型：(file, fileList, uploadId, repeatFiles) => {}\n    // uploadId：本次上传操作唯一ID，多选文件模式可通过该唯一ID只显示一次错误\n    // repeatFiles: 重复文件列表\n    fileRepeatErrorPro: {\n      type: Function,\n      default: undefined\n    },\n\n    // =============================== 公用检测 - 检测错误控制 ========\n\n    // 每轮文件上传检测错误抛出模式:\n    // 0 -> 不限制，有多少错误正常抛出，可以通过每轮的 uploadId 自行判断重复问题 \n    // 1 -> 本轮检测错误只会抛出一次，如果本轮有多次错误，只会抛出第一次的错误，后续错误都不会在抛出\n    // 每轮：也就是每次点击上传按钮选择文件后确定上传算一轮，也是本次提交（单选多选都一样）\n    errorMode: {\n      type: Number,\n      default: () => 1\n    },\n    // 错误唯一标识（uploadId）存放（只在模式为 2 时生效）\n    errorUploadIds: {\n      type: Array,\n      default: () => []\n    },\n\n    // =============================== 公用检测 - 文件检测 ========\n\n    // (多选文件模式下生效)文件检测模式：\n    // 0 -> 不检测\n    // 1 -> 本次选择的所有文件，检测失败的移除，成功的上传\n    // 2 -> 本次选择的所有文件，有一个检测失败，全部移除\n    fileCheckMode: {\n      type: Number,\n      default: () => 2\n    },\n\n    // =============================== 公用检测 - 文件数量限制 ========\n\n    // 上传文件数量限制：0 -> 不限制，随便传\n    fileNumber: {\n      type: Number,\n      default: () => 0\n    },\n    // 上传文件数量限制检测失败提示\n    fileNumberError: {\n      type: String,\n      default: () => '已超出上传文件数量限制'\n    },\n    // 上传文件数量限制失败提示，实现这个将不使用 fileRepeatError\n    // 类型：(file, fileList, uploadId) => {}\n    // uploadId：本次上传操作唯一ID，多选文件模式可通过该唯一ID只显示一次错误\n    fileNumberErrorPro: {\n      type: Function,\n      default: undefined\n    },\n\n    // =============================== 公用检测 - 文件大小 ========\n    \n    // 文件大小检测模式（单位 kb）: \n    // 0 -> 关闭\n    // 1 -> 小于\n    // 2 -> 大于\n    // 3 -> 等于\n    // 11 -> 小于或等于\n    // 22 -> 大于或等于\n    kbCompareMode: {\n      type: Number,\n      default: () => 0\n    },\n    // 文件大小（单位 kb）\n    kbCompareSize: {\n      type: Number,\n      default: () => 0\n    },\n    // 文件大小检测失败提示\n    kbCompareError: {\n      type: String,\n      default: () => '文件大小与设定范围不匹配'\n    },\n    // 文件大小检测失败提示回调，实现这个将不使用 kbCompareError\n    // 类型：(file, fileList, uploadId) => {}\n    // uploadId：本次上传操作唯一ID，多选文件模式可通过该唯一ID只显示一次错误\n    kbCompareErrorPro: {\n      type: Function,\n      default: undefined\n    },\n\n    // =============================== 图片检查 - 宽高限制 ========\n\n    // 图片宽高检测模式（单位 px）: \n    // 0 -> 关闭\n    // 1 -> 小于\n    // 2 -> 大于\n    // 3 -> 等于\n    // 11 -> 小于或等于\n    // 22 -> 大于或等于\n    imgSizeMode: {\n      type: Number,\n      default: () => 0\n    },\n    // 图片宽度（单位 px）\n    imgSizeWidth: {\n      type: Number,\n      default: () => 0\n    },\n    // 图片高度（单位 px）\n    imgSizeHeight: {\n      type: Number,\n      default: () => 0\n    },\n    // 图片宽高检测失败提示\n    imgSizeError: {\n      type: String,\n      default: () => '图片宽高与设定宽高不匹配'\n    },\n    // 图片宽高检测失败提示回调，实现这个将不使用 imgSizeError\n    // 类型：(file, fileList, uploadId) => {}\n    // uploadId：本次上传操作唯一ID，多选文件模式可通过该唯一ID只显示一次错误\n    imgSizeErrorPro: {\n      type: Function,\n      default: undefined\n    },\n\n    // =============================== 图片检查 - 比例限制 ========\n\n    // 图片比例检测模式（单位 px）: \n    // 0 -> 关闭\n    // 1 -> 开启\n    imgScaleMode: {\n      type: Number,\n      default: () => 0\n    },\n    // 图片宽度比例\n    imgScaleWidth: {\n      type: Number,\n      default: () => 0\n    },\n    // 图片高度比例\n    imgScaleHeight: {\n      type: Number,\n      default: () => 0\n    },\n    // 图片比例检测失败提示\n    imgScaleError: {\n      type: String,\n      default: () => '图片比例与设定比例不匹配'\n    },\n    // 图片比例检测失败提示回调，实现这个将不使用 imgScaleError\n    // 类型：(file, fileList, uploadId) => {}\n    // uploadId：本次上传操作唯一ID，多选文件模式可通过该唯一ID只显示一次错误\n    imgScaleErrorPro: {\n      type: Function,\n      default: undefined\n    },\n\n    // =============================== 视频检查 - 宽高限制 ========\n\n    // 图片宽高检测模式（单位 px）: \n    // 0 -> 关闭\n    // 1 -> 小于\n    // 2 -> 大于\n    // 3 -> 等于\n    // 11 -> 小于或等于\n    // 22 -> 大于或等于\n    videSizeMode: {\n      type: Number,\n      default: () => 0\n    },\n    // 图片宽度（单位 px）\n    videSizeWidth: {\n      type: Number,\n      default: () => 0\n    },\n    // 图片高度（单位 px）\n    videSizeHeight: {\n      type: Number,\n      default: () => 0\n    },\n    // 图片宽高检测失败提示\n    videSizeError: {\n      type: String,\n      default: () => '视频宽高与设定宽高不匹配'\n    },\n    // 图片宽高检测失败提示回调，实现这个将不使用 videSizeError\n    // 类型：(file, fileList, uploadId) => {}\n    // uploadId：本次上传操作唯一ID，多选文件模式可通过该唯一ID只显示一次错误\n    videSizeErrorPro: {\n      type: Function,\n      default: undefined\n    },\n\n    // =============================== 图片检查 - 比例限制 ========\n\n    // 图片比例检测模式（单位 px）: \n    // 0 -> 关闭\n    // 1 -> 开启\n    videScaleMode: {\n      type: Number,\n      default: () => 0\n    },\n    // 图片宽度比例\n    videScaleWidth: {\n      type: Number,\n      default: () => 0\n    },\n    // 图片高度比例\n    videScaleHeight: {\n      type: Number,\n      default: () => 0\n    },\n    // 图片比例检测失败提示\n    videScaleError: {\n      type: String,\n      default: () => '视频比例与设定比例不匹配'\n    },\n    // 图片比例检测失败提示回调，实现这个将不使用 videScaleError\n    // 类型：(file, fileList, uploadId) => {}\n    // uploadId：本次上传操作唯一ID，多选文件模式可通过该唯一ID只显示一次错误\n    videScaleErrorPro: {\n      type: Function,\n      default: undefined\n    },\n\n    // =============================== 自定义属性存放 ========\n\n    // 如果自定义上传写在本组件内部，回调结果自行决定，外层通过 fileJson.status 判断成功失败即可\n    // 例如：(fileJson, err || res) => {}\n    uploadResult: {\n      type: Function,\n      default: undefined\n    }\n  },\n  methods: {\n    // 自定义上传\n    customRequest (data) {\n      // 找到对应的上传文件对象\n      const fileJson = this.fileList.find(item => {\n        return data.file.uid === item.uid\n      })\n      // 自定义上传服务器\n      if (this.customRequestPro) {\n        // 自定义请求 \n        this.customRequestPro(data, fileJson, (isSuccess) => {\n          // uploading(上传中)、done(上传成功)、error(上传失败)\n          const status = isSuccess ? 'done' : 'error'\n          this.customRequestResult(fileJson, status)\n        })\n      } else {\n        this.$message.error('请自己实现 customRequestPro 自定义上传操作！')\n        // 如果需要将上传写到内部这里，回调结果看情况自定义，外层通过 fileJson.status 判断成功失败即可\n        // if (this.uploadResult) { this.uploadResult(fileJson, err || res) }\n        // 例如：(七牛上传，给与参考，推荐将下面这段上传封装成一个公共 funcation 放到一个公告上传 js 文件中，当上传失败需要重新上传操作时，可以传入指定参数重新上传即可)\n        \n        // (参考案例)\n        // 将 file 文件带入到 fileJson 中\n        // fileJson.file = data.file\n        // 开始上传\n        // this.uploadCustom(fileJson, this.uploadResult)\n      }\n    },\n    // (参考案例)自定义上传，推荐放到一个公共文件中去上传，导入到本文件中使用，方便上传失败重新上传操作\n    // uploadCustom (fileJson, uploadResult) {\n    //   // 检查是否有文件\n    //   if (fileJson.file) {\n    //     // 设置为上传状态\n    //     fileJson.status = 'uploading'\n    //     // 清空上传进度\n    //     fileJson.percent = 0\n    //     // 回调对象\n    //     const observer = {\n    //       next (res) {\n    //         // 输出进度\n    //         // console.log('上传进度', res)\n    //         // 记录进度\n    //         fileJson.percent = res.total.percent\n    //       },\n    //       error (err) {\n    //         // 输出错误\n    //         // console.log('上传失败', err)\n    //         // 设置为失败状态\n    //         fileJson.status = 'error'\n    //         // 回调结果\n    //         if (uploadResult) { uploadResult(fileJson, err) }\n    //       },\n    //       complete (res) {\n    //         // 输出结果\n    //         // console.log('上传成功', res)\n    //         // 设置为成功状态\n    //         fileJson.status = 'done'\n    //         // 上传成功则清空 file 对象，因为只有失败才可能需要重新上传\n    //         fileJson.file = undefined\n    //         // 回调结果\n    //         if (uploadResult) { uploadResult(fileJson, res) }\n    //       }\n    //     }\n    //     // 开始上传回调\n    //     if (uploadResult) { uploadResult(fileJson) }\n    //     // 开始上传\n    //     uploadOther(fileJson.file, observer)\n    //   }\n    // },\n    // 准备上传\n    beforeUpload (file, fileList) {\n      // 开始检测\n      return new Promise((resolve, reject) => {\n        // 获取本次上传唯一ID\n        const uploadId = this.getUploadId(fileList)\n\n        // ----------------------------- 公用检测 - 文件数量限制 --------\n\n        // 总文件数量\n        if (this.fileNumber !== 0) {\n          // 文件总数量\n          const total = this.fileList.length + fileList.length\n          // 如果文件总数量超过文件限制数量则停止上传\n          if (total > this.fileNumber) {\n            // 是否允许抛出错误\n            if (!this.isExistErrorUploadId(uploadId)) {\n              // 有错误回调\n              if (this.fileNumberErrorPro) {\n                // 错误回调\n                this.fileNumberErrorPro(file, fileList, uploadId)\n              } else {\n                // 有错误文案\n                if (this.fileNumberError) { this.$message.error(this.fileNumberError) }\n              }\n            }\n            // 不允许上传\n            reject(new Error())\n            return\n          }\n        }\n\n        // ----------------------------- 公用检测 - 文件检测 --------\n\n        // 文件对象\n        const fileJson = {\n          // 唯一标识符\n          uid: file.uid,\n          // 文件名\n          name: file.name,\n          // 文件状态：uploading(上传中)、done(上传成功)、error(上传失败)\n          status: 'uploading',\n          // 防止重复标识\n          dupid: file.lastModified,\n          // 本轮上传ID(上传服务器可剔除)\n          upid: uploadId\n          // 其他自用字段可自行附带\n        }\n\n        // 文件检测 - 同步\n        if (this.fileCheckMode !== 0) {\n          // 匹配检测模式\n          if (this.fileCheckMode === 1) {\n            // 本次选择的所有文件，检测失败的移除，成功的上传\n            this.fileCheck(file, fileList, uploadId).then(() => {\n              // 准备上传 预处理 1\n              this.beforeUploadProReadyOne(file, fileList, fileJson).then(() => {\n                // 加入文件列表\n                this.fileList.push(fileJson)\n                // 允许上传\n                resolve()\n              }).catch(() => {\n                // 不允许上传\n                reject(new Error())\n              })\n            }).catch(() => {\n              // 不允许上传\n              reject(new Error())\n            })\n          } else if (this.fileCheckMode === 2) {\n            // 本次选择的所有文件，有一个检测失败，全部移除\n            // Promise 数组\n            const ps = []\n            // 存放 Promise\n            fileList.forEach(item => {\n              ps.push(this.fileCheck(item, fileList, uploadId))\n            })\n            // 全部请求\n            Promise.all(ps).then(() => {\n              // 准备上传 预处理 1\n              this.beforeUploadProReadyOne(file, fileList, fileJson).then(() => {\n                // 加入文件列表\n                this.fileList.push(fileJson)\n                // 允许上传\n                resolve()\n              }).catch(() => {\n                // 不允许上传\n                reject(new Error())\n              })\n            }).catch(() => {\n              // 不允许上传\n              reject(new Error())\n            })\n          } else {\n            // 加入文件列表\n            this.fileList.push(fileJson)\n            // 允许上传\n            resolve()\n          }\n        } else {\n          // 加入文件列表\n          this.fileList.push(fileJson)\n          // 允许上传\n          resolve()\n        }\n      })\n    },\n    // 准备上传 - 预处理 1\n    beforeUploadProReadyOne (file, fileList, fileJson) {\n      // 预处理\n      return new Promise((resolve, reject) => {\n\n        // ----------------------------- 准备上传 - 预处理 2 --------\n        \n        // 准备上传 预处理\n        this.beforeUploadProReadyTwo(file, fileList, fileJson).then(() => {\n          // 允许上传\n          resolve()\n        }).catch(() => {\n          // 不允许上传\n          reject(new Error())\n        })\n      })\n    },\n    // 准备上传 - 预处理 2\n    beforeUploadProReadyTwo (file, fileList, fileJson) {\n      // 预处理\n      return new Promise((resolve, reject) => {\n        // 外传回调\n        if (this.beforeUploadPro) {\n          // 获取回调结果\n          const p = this.beforeUploadPro(file, fileList, fileJson)\n          // 检测返回类型\n          if (typeof(p) === 'boolean') {\n            // 是否为 Boolean\n            if (p) {\n              // 允许上传\n              resolve()\n            } else {\n              // 不允许上传\n              reject(new Error())\n            }\n          } else if (!!p && (typeof(p) === 'object' || typeof obj === 'function') && typeof(p.then) === 'function') {\n            // 是否为 Promise\n            p.then(() => {\n              // 允许上传\n              resolve()\n            }).catch(() => {\n              // 不允许上传\n              reject(new Error())\n            })\n          }\n        } else {\n          // 允许上传\n          resolve()\n        }\n      })\n    },\n    // 点击移除文件时的回调\n    remove (file) {\n      // 预处理\n      return new Promise((resolve, reject) => {\n        // 外传回调\n        if (this.removePro) {\n          // 获取回调结果\n          const p = this.removePro(file)\n          // 检测返回类型\n          if (typeof(p) === 'boolean') {\n            // 是否为 Boolean\n            if (p) {\n              // 删除文件\n              const index = this.fileList.indexOf(file)\n              this.fileList.splice(index, 1)\n              // 允许删除\n              resolve()\n            } else {\n              // 不允许删除\n              reject(new Error())\n            }\n          } else if (!!p && (typeof(p) === 'object' || typeof obj === 'function') && typeof(p.then) === 'function') {\n            // 是否为 Promise\n            p.then(() => {\n              // 删除文件\n              const index = this.fileList.indexOf(file)\n              this.fileList.splice(index, 1)\n              // 允许上传\n              resolve()\n            }).catch(() => {\n              // 不允许删除\n              reject(new Error())\n            })\n          }\n        } else {\n          // 删除文件\n          const index = this.fileList.indexOf(file)\n          this.fileList.splice(index, 1)\n          // 允许删除\n          resolve()\n        }\n      })\n    },\n    // 文件检测 - 同步\n    fileCheck (file, fileList, uploadId) {\n      // 预处理\n      return new Promise((resolve, reject) => {\n\n        // ----------------------------- 公用检测 - 文件重复 --------\n\n        // 判断重复文件\n        if (this.fileRepeatMode !== 0) {\n          // 获取重复列表\n          const repeatFiles = []\n          fileList.forEach(itemOne => {\n            this.fileList.some(itemTwo => {\n              // 检测到重复文件 名称相同 && 最后修改时间相同 && 上传ID不相同\n              const isRepeat = itemOne.name === itemTwo.name && itemOne.lastModified === itemTwo.dupid && uploadId !== itemTwo.upid\n              if (isRepeat) { repeatFiles.push(itemOne) }\n              return isRepeat\n            })\n          })\n          // 根据重复类型检测\n          if (this.fileRepeatMode === 1) {\n            // 禁止重复文件(多选模式：本次选择的所有文件，重复文件移除，不重复文件上传)\n            const isRepeat = this.fileList.some(item => {\n              return file.name === item.name && file.lastModified === item.dupid\n            })\n            // 存在重复\n            if (isRepeat) {\n              // 是否允许抛出错误\n              if (!this.isExistErrorUploadId(uploadId)) {\n                // 有错误回调\n                if (this.fileRepeatErrorPro) {\n                  // 错误回调\n                  this.fileRepeatErrorPro(file, fileList, uploadId, repeatFiles)\n                } else {\n                  // 有错误文案\n                  if (this.fileRepeatError) { this.$message.error(this.fileRepeatError) }\n                }\n              }\n              // 检测失败\n              reject(new Error())\n              return\n            }\n          } else if (this.fileRepeatMode === 2) {\n            // 禁止重复文件(多选模式：本次选择的所有文件，有一个存在重复，全部移除)\n            const isRepeat = Boolean(repeatFiles.length)\n            // 存在重复\n            if (isRepeat) {\n              // 是否允许抛出错误\n              if (!this.isExistErrorUploadId(uploadId)) {\n                // 有错误回调\n                if (this.fileRepeatErrorPro) {\n                  // 错误回调\n                  this.fileRepeatErrorPro(file, fileList, uploadId, repeatFiles)\n                } else {\n                  // 有错误文案\n                  if (this.fileRepeatError) { this.$message.error(this.fileRepeatError) }\n                }\n              }\n              // 检测失败\n              reject(new Error())\n              return\n            }\n          }\n        }\n\n        // ----------------------------- 公用检测 - 文件大小 --------\n      \n        // 开启了 - 文件大小检测\n        if (this.kbCompareMode !== 0) {\n          // 检测结果\n          var isOK = true\n          // 获取文件大小（单位：kb）\n          const fileSize = file.size / 1024\n          // 开始检测\n          if (this.kbCompareMode === 1) {\n            // 小于\n            isOK = fileSize < this.kbCompareSize\n          } else if (this.kbCompareMode === 2) {\n            // 大于\n            isOK = fileSize > this.kbCompareSize\n          } else if (this.kbCompareMode === 3) {\n            // 等于\n            isOK = fileSize === this.kbCompareSize\n          } else if (this.kbCompareMode === 11) {\n            // 小于等于\n            isOK = fileSize <= this.kbCompareSize\n          } else if (this.kbCompareMode === 22) {\n            // 大于等于\n            isOK = fileSize >= this.kbCompareSize\n          } else {}\n          // 判断检测结果\n          if (!isOK) {\n            // 是否允许抛出错误\n            if (!this.isExistErrorUploadId(uploadId)) {\n              // 有错误回调\n              if (this.kbCompareErrorPro) {\n                // 错误回调\n                this.kbCompareErrorPro(file, fileList, uploadId)\n              } else {\n                // 有错误文案\n                if (this.kbCompareError) { this.$message.error(this.kbCompareError) }\n              }\n            }\n            // 检测失败\n            reject(new Error())\n            return\n          }\n        }\n\n        // ----------------------------- 图片检查 - 宽高限制 - 比例限制 --------\n\n        // 图片检测\n        if ((this.imgSizeMode !== 0 || this.imgScaleMode !== 0) && this.isImage(file.name)) {\n          // 获取图片宽高\n          this.imageSize(file, (imgWidth, imgHeight) => {\n            // 图片检测 - 宽高限制\n            if (this.imgSizeMode !== 0) {\n              // 检测结果\n              var isOK = true\n              // 开始检测\n              if (this.imgSizeMode === 1) {\n                // 小于\n                isOK = (imgWidth < this.imgSizeWidth && imgHeight < this.imgSizeHeight)\n              } else if (this.kbCompareMode === 2) {\n                // 大于\n                isOK = (imgWidth > this.imgSizeWidth && imgHeight > this.imgSizeHeight)\n              } else if (this.imgSizeMode === 3) {\n                // 等于\n                isOK = (imgWidth === this.imgSizeWidth && imgHeight === this.imgSizeHeight)\n              } else if (this.imgSizeMode === 11) {\n                // 小于等于\n                isOK = (imgWidth <= this.imgSizeWidth && imgHeight <= this.imgSizeHeight)\n              } else if (this.imgSizeMode === 22) {\n                // 大于等于\n                isOK = (imgWidth >= this.imgSizeWidth && imgHeight >= this.imgSizeHeight)\n              } else {}\n              // 判断检测结果\n              if (!isOK) {\n                // 是否允许抛出错误\n                if (!this.isExistErrorUploadId(uploadId)) {\n                  // 有错误回调\n                  if (this.imgSizeErrorPro) {\n                    // 错误回调\n                    this.imgSizeErrorPro(file, fileList, uploadId)\n                  } else {\n                    // 有错误文案\n                    if (this.imgSizeError) { this.$message.error(this.imgSizeError) }\n                  }\n                }\n                // 检测失败\n                reject(new Error())\n                return\n              }\n            }\n            // 图片检测 - 比例限制\n            if (this.imgScaleMode !== 0) {\n              // 检测结果\n              var isWidth = (imgWidth % this.imgScaleWidth) === 0\n              var isHeight = (imgHeight % this.imgScaleHeight) === 0\n              // 判断检测结果\n              if (!isWidth && !isHeight) {\n                // 是否允许抛出错误\n                if (!this.isExistErrorUploadId(uploadId)) {\n                  // 有错误回调\n                  if (this.imgScaleErrorPro) {\n                    // 错误回调\n                    this.imgScaleErrorPro(file, fileList, uploadId)\n                  } else {\n                    // 有错误文案\n                    if (this.imgScaleError) { this.$message.error(this.imgScaleError) }\n                  }\n                }\n                // 检测失败\n                reject(new Error())\n                return\n              }\n            }\n            // 检测成功\n            resolve()\n          })\n          // 不要在向下走了\n          return\n        }\n\n        // ----------------------------- 视频检查 - 宽高限制 - 比例限制 --------\n\n        // 视频检测\n        if ((this.videSizeMode !== 0 || this.videScaleMode !== 0) && this.isVideo(file.name)) {\n          // 获取图片宽高\n          this.videoSize(file, (videoWidth, videoHeight) => {\n            // 图片检测 - 宽高限制\n            if (this.videSizeMode !== 0) {\n              // 检测结果\n              var isOK = true\n              // 开始检测\n              if (this.videSizeMode === 1) {\n                // 小于\n                isOK = (videoWidth < this.videSizeWidth && videoHeight < this.videSizeHeight)\n              } else if (this.videSizeMode === 2) {\n                // 大于\n                isOK = (videoWidth > this.videSizeWidth && videoHeight > this.videSizeHeight)\n              } else if (this.videSizeMode === 3) {\n                // 等于\n                isOK = (videoWidth === this.videSizeWidth && videoHeight === this.videSizeHeight)\n              } else if (this.videSizeMode === 11) {\n                // 小于等于\n                isOK = (videoWidth <= this.videSizeWidth && videoHeight <= this.videSizeHeight)\n              } else if (this.videSizeMode === 22) {\n                // 大于等于\n                isOK = (videoWidth >= this.videSizeWidth && videoHeight >= this.videSizeHeight)\n              } else {}\n              // 判断检测结果\n              if (!isOK) {\n                // 是否允许抛出错误\n                if (!this.isExistErrorUploadId(uploadId)) {\n                  // 有错误回调\n                  if (this.videSizeErrorPro) {\n                    // 错误回调\n                    this.videSizeErrorPro(file, fileList, uploadId)\n                  } else {\n                    // 有错误文案\n                    if (this.videSizeError) { this.$message.error(this.videSizeError) }\n                  }\n                }\n                // 检测失败\n                reject(new Error())\n                return\n              }\n            }\n            // 图片检测 - 比例限制\n            if (this.videScaleMode !== 0) {\n              // 检测结果\n              var isWidth = (videoWidth % this.videScaleWidth) === 0\n              var isHeight = (videoHeight % this.videScaleHeight) === 0\n              // 判断检测结果\n              if (!isWidth && !isHeight) {\n                // 是否允许抛出错误\n                if (!this.isExistErrorUploadId(uploadId)) {\n                  // 有错误回调\n                  if (this.videScaleErrorPro) {\n                    // 错误回调\n                    this.videScaleErrorPro(file, fileList, uploadId)\n                  } else {\n                    // 有错误文案\n                    if (this.videScaleError) { this.$message.error(this.videScaleError) }\n                  }\n                }\n                // 检测失败\n                reject(new Error())\n                return\n              }\n            }\n            // 检测成功\n            resolve()\n          })\n          // 不要在向下走了\n          return\n        }\n\n        // ----------------------------- 检测成功 --------\n\n        // 检测成功\n        resolve()\n      })\n    },\n    // 自定义上传结果\n    customRequestResult (fileJson, status) {\n      // 设置上传状态\n      fileJson.status = status\n    },\n    // 获取本次上传唯一ID\n    getUploadId (fileList) {\n      // 唯一标识符\n      var uploadId = ''\n      // 获取唯一标识符\n      fileList.forEach(item => {\n        uploadId += item.uid\n      })\n      // 返回\n      return uploadId\n    },\n    // 是否存在本轮错误 uploadId\n    isExistErrorUploadId (uploadId) {\n      // 当为错误唯一模式的时候才需要检测\n      if (this.errorMode === 1) {\n        const index = this.errorUploadIds.indexOf(uploadId)\n        const isExist = index !== -1\n        if (!isExist) {\n          this.errorUploadIds.push(uploadId)\n        }\n        return isExist\n      }\n      // 不包含\n      return false\n    },\n    // 获取图片尺寸（异步获取）\n    imageSize (file, result) {\n      // 文件有值\n      if (file) {\n        // 创建 FileReader\n        var reader = new FileReader()\n        // 加载文件\n        reader.onload = (e) => {\n          // 获取 base64 图片数据\n          var imgData = e.target.result\n          // 通过Image对象加载 base64 图片数据\n          var image = new Image()\n          // 图片加载完成\n          image.onload = () => {\n            // 返回宽高\n            result(image.width, image.height)\n          }\n          // 添加图片进行读取\n          image.src = imgData\n        }\n        // 开始读取文件\n        reader.readAsDataURL(file)\n      } else {\n        // 未获取到文件\n        result(0, 0)\n      }\n    },\n    // 获取视频尺寸（异步获取）\n    videoSize (file, result) {\n      // 文件有值\n      if (file) {\n        // 获取文件URL\n        const url = URL.createObjectURL(file)\n        // 创建视频标签\n        const video = document.createElement('video')\n        // 加载视频资源\n        video.onloadedmetadata = evt => {\n          // 移除\n          URL.revokeObjectURL(url)\n          // 返回宽高\n          result(video.videoWidth, video.videoHeight)\n        }\n        // 设置视频源\n        video.src = url\n        // 加载\n        video.load()\n      } else {\n        // 未获取到文件\n        result(0, 0)\n      }\n    },\n    // 是否为图片\n    isImage (filePath) {\n      // 图片后缀\n      const types = ['png', 'jpg', 'jpeg', 'bmp', 'gif', 'webp', 'psd', 'svg', 'tiff']\n      // 文件后缀\n      const type = this.fileExtension(filePath)\n      // 是否包含\n      return types.indexOf(type) !== -1\n    },\n    // 是否为视频\n    isVideo (filePath) {\n      // 图片后缀\n      const types = ['avi', 'wmv', 'mpg', 'mpeg', 'mov', 'rm', 'ram', 'swf', 'flv', 'mp4', 'mp3', 'wma', 'avi', 'rm', 'rmvb', 'flv', 'mpg', 'mkv']\n      // 文件后缀\n      const type = this.fileExtension(filePath)\n      // 是否包含\n      return types.indexOf(type) !== -1\n    },\n    // 获取文件后缀类型\n    fileExtension (filePath) {\n      // 获取最后一个.的位置\n      var index= filePath.lastIndexOf(\".\")\n      // 获取后缀\n      var type = filePath.substr(index + 1)\n      // 返回类型\n      return type.toLowerCase()\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>"],"sourceRoot":"src/components"}]}