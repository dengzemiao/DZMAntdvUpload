{"remainingRequest":"/Users/dengzemiao/Desktop/share/upload-demo/node_modules/babel-loader/lib/index.js!/Users/dengzemiao/Desktop/share/upload-demo/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/dengzemiao/Desktop/share/upload-demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dengzemiao/Desktop/share/upload-demo/src/components/Upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/dengzemiao/Desktop/share/upload-demo/src/components/Upload.vue","mtime":1614250944947},{"path":"/Users/dengzemiao/Desktop/share/upload-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dengzemiao/Desktop/share/upload-demo/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/dengzemiao/Desktop/share/upload-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dengzemiao/Desktop/share/upload-demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Upload.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <!-- 主视图 -->\n  <div class=\"upload-view\">\n    <!-- 上传组件 -->\n    <a-upload\n      :accept=\"accept\"\n      :multiple=\"multiple\"\n      :disabled=\"disabled\"\n      :showUploadList=\"showUploadList\"\n      :fileList=\"fileList\"\n      :beforeUpload=\"beforeUpload\"\n      :customRequest=\"customRequest\"\n      :remove=\"remove\"\n    >\n      <!-- 自定义 -->\n      <!-- <slot></slot> -->\n      <!-- 图片上传按钮 -->\n      <a-button><a-icon type=\"upload\" />上传文件</a-button>\n    </a-upload>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: {\n\n    // =============================== 原生属性 - a-upload 自带属性扩展 ========\n\n    // 接受上传的文件类型 \n    // 参考地址：https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#unique_file_type_specifiers\n    accept: {\n      type: String,\n      default: () => undefined\n    },\n    // 已经上传的文件列表（受控）\n    // 列表存放例子：[{ uid: '文件唯一标识，必带', name: '文件名，必带', status: '上传状态，必带', dupid: '防止重复文件标识(file.lastModified)，可选', upid: '本轮上传唯一标识，提交服务器可剔除，可选'}]\n    // 如果上面单个 Json 中需要其他自用字段可以通过拦截 beforeUploadPro 自行附带\n    // 文件状态：uploading(上传中)、done(上传成功)、error(上传失败)、removed(移除，点击组件自带的删除按钮会被设置为移除状态，通常只需要前三种状态)\n    fileList: {\n      type: Array,\n      default: () => []\n    },\n    // 是否展示上传列表\n    showUploadList: {\n      type: Boolean,\n      default: () => true\n    },\n    // 是否支持多选文件，ie10+ 支持。开启后按住 ctrl 可选择多个文件。\n    multiple: {\n      type: Boolean,\n      default: () => true\n    },\n    // 是否禁用\n    disabled: {\n      type: Boolean,\n      default: () => false\n    },\n    // 准备上传，回调钩子，若返回 false 则停止上传\n    // 类型：(file, fileList, fileJson, isAllow) => boolean\n    beforeUploadPro: {\n      type: Function,\n      default: undefined\n    },\n    // 自定义上传，回调钩子，可以自定义自己的上传实现，\n    // 类型：(data, fileJson, (isSuccess) => {}) => {}\n    customRequestPro: {\n      type: Function,\n      default: undefined\n    },\n    // 点击移除文件时的回调，返回值为 false 时不移除\n    // 类型：(file) => boolean\n    removePro: {\n      type: Function,\n      default: undefined\n    },\n\n    // =============================== 公用检测 - 文件重复 ========\n\n    // 文件重复检测模式: 0 -> 允许重复，1 -> 禁止重复文件(多选模式：本次选择的所有文件，重复文件移除，不重复文件上传)，2 -> 禁止重复文件(多选模式：本次选择的所有文件，有一个存在重复，全部移除)\n    fileRepeatMode: {\n      type: Number,\n      default: () => 1\n    },\n    // 文件重复检测失败提示\n    fileRepeatError: {\n      type: String,\n      default: () => '不能重复导入文件'\n    },\n    // 文件重复检测失败提示，实现这个将不使用 fileRepeatError\n    // uploadId：本次上传操作唯一ID，多选文件模式可通过该唯一ID只显示一次错误\n    // repeatFiles: 重复文件列表\n    // 类型：(file, fileList, uploadId, repeatFiles) => {}\n    fileRepeatErrorPro: {\n      type: Function,\n      default: undefined\n    },\n\n    // =============================== 公用检测 - 文件数量限制 ========\n\n    // 上传文件数量限制：0 -> 不限制，随便传\n    fileNumber: {\n      type: Number,\n      default: () => 2\n    },\n    // 上传文件数量限制检测失败提示\n    fileNumberError: {\n      type: String,\n      default: () => '已超出上传文件数量限制'\n    },\n    // 上传文件数量限制失败提示，实现这个将不使用 fileRepeatError\n    // uploadId：本次上传操作唯一ID，多选文件模式可通过该唯一ID只显示一次错误\n    // exceedNumber：本轮超出的文件数量\n    // 类型：(file, fileList, uploadId, exceedNumber) => {}\n    fileNumberErrorPro: {\n      type: Function,\n      default: undefined\n    },\n\n    // =============================== 公用检测 - 文件检测 ========\n\n    // (多选文件模式下生效)文件检测模式：0 -> 不检测，1 -> 本次选择的所有文件，检测失败的移除，成功的上传，2 -> 本次选择的所有文件，有一个检测失败，全部移除\n    fileCheckMode: {\n      type: Number,\n      default: () => 0\n    },\n\n    // =============================== 公用检测 - 文件大小 ========\n    \n    // 文件大小检测模式（单位 kb）: 0 -> 关闭，1 -> 小于，2 -> 大于，3 -> 等于，，11 -> 小于或等于，22 -> 大于或等于\n    kbCompareMode: {\n      type: Number,\n      default: () => 0\n    },\n    // 文件大小（单位 kb）\n    kbCompareSize: {\n      type: Number,\n      default: () => 0\n    },\n    // 文件大小检测失败提示\n    kbCompareError: {\n      type: String,\n      default: () => '文件大小与设定范围不匹配'\n    },\n    // 文件大小检测失败提示回调，实现这个将不使用 kbCompareError\n    // uploadId：本次上传操作唯一ID，多选文件模式可通过该唯一ID只显示一次错误\n    // 类型：(file, fileList, uploadId) => {}\n    kbCompareErrorPro: {\n      type: Function,\n      default: undefined\n    }\n\n    // =============================== 图片检查 ========\n  },\n  methods: {\n    // 准备上传\n    beforeUpload (file, fileList) {\n\n      // 是否允许上传\n      var isOK = true\n      // 获取本次上传唯一ID\n      const uploadId = this.getUploadId(fileList)\n\n      // ----------------------------- 公用检测 - 文件数量限制 --------\n\n      // 总文件数量\n      if (this.fileNumber !== 0) {\n        // 获取未进入上传文件数量\n        var fileNumber = 0\n        fileList.forEach(itemOne => {\n          const isExist = this.fileList.some(itemTwo => {\n            return itemOne.name === itemTwo.name && itemOne.lastModified === itemTwo.dupid\n          })\n          if (!isExist) { fileNumber += 1 }\n        })\n        // 文件总数量\n        const total = this.fileList.length + fileNumber\n        // 如果文件总数量超过文件限制数量则停止上传\n        if (total > this.fileNumber) {\n          // 有错误回调\n          if (this.fileNumberErrorPro) {\n            // 错误回调\n            this.fileNumberErrorPro(file, fileList, uploadId, fileNumber)\n          } else {\n            // 有错误文案\n            if (this.fileNumberError) { this.$message.error(this.fileNumberError) }\n          }\n          // 不允许上传\n          isOK = false\n        }\n      }\n\n      // ----------------------------- 公用检测 - 文件重复 --------\n\n      // 判断重复文件\n      if (this.fileRepeatMode !== 0) {\n        // 获取重复列表\n        const repeatFiles = []\n        fileList.forEach(itemOne => {\n          this.fileList.some(itemTwo => {\n            // 检测到重复文件 名称相同 && 最后修改时间相同 && 上传ID不相同\n            const isRepeat = itemOne.name === itemTwo.name && itemOne.lastModified === itemTwo.dupid && uploadId !== itemTwo.upid\n            if (isRepeat) { repeatFiles.push(itemOne) }\n            return isRepeat\n          })\n        })\n        // 根据重复类型检测\n        if (this.fileRepeatMode === 1) {\n          // 禁止重复文件(多选模式：本次选择的所有文件，重复文件移除，不重复文件上传)\n          const isRepeat = this.fileList.some(item => {\n            return file.name === item.name && file.lastModified === item.dupid\n          })\n          // 存在重复\n          if (isRepeat) {\n            // 有错误回调\n            if (this.fileRepeatErrorPro) {\n              // 错误回调\n              this.fileRepeatErrorPro(file, fileList, uploadId, repeatFiles)\n            } else {\n              // 有错误文案\n              if (this.fileRepeatError) { this.$message.error(this.fileRepeatError) }\n            }\n            // 不允许上传\n            isOK = !isRepeat\n          }\n        } else if (this.fileRepeatMode === 2) {\n          // 禁止重复文件(多选模式：本次选择的所有文件，有一个存在重复，全部移除)\n          const isRepeat = Boolean(repeatFiles.length)\n          // 存在重复\n          if (isRepeat) {\n            // 有错误回调\n            if (this.fileRepeatErrorPro) {\n              // 错误回调\n              this.fileRepeatErrorPro(file, fileList, uploadId, repeatFiles)\n            } else {\n              // 有错误文案\n              if (this.fileRepeatError) { this.$message.error(this.fileRepeatError) }\n            }\n            // 不允许上传\n            isOK = !isRepeat\n          }\n        }\n      }\n\n      // ----------------------------- 公用检测 - 文件检测 --------\n\n      // 文件检测\n      if (this.fileCheckMode !== 0 && isOK) {\n        // 匹配检测模式\n        if (this.fileCheckMode === 1) {\n          // 本次选择的所有文件，检测失败的移除，成功的上传\n          isOK = this.fileCheck(file, fileList, uploadId)\n        } else if (this.fileCheckMode === 2) {\n          // 本次选择的所有文件，有一个检测失败，全部移除\n          isOK = fileList.every(item => {\n            return this.fileCheck(item, fileList, uploadId)\n          })\n        }\n      }\n\n      // ----------------------------- 组装数据 --------\n\n      // 文件对象\n      const fileJson = {\n        // 唯一标识符\n        uid: file.uid,\n        // 文件名\n        name: file.name,\n        // 文件状态：uploading(上传中)、done(上传成功)、error(上传失败)\n        status: 'uploading',\n        // 防止重复标识\n        dupid: file.lastModified,\n        // 本轮上传ID(上传服务器可剔除)\n        upid: uploadId\n        // 其他自用字段可自行附带\n      }\n\n      // 外传回调\n      if (this.beforeUploadPro) {\n        // 获取回调结果\n        isOK = this.beforeUploadPro(file, fileList, fileJson, isOK) \n      }\n\n      // 检查结果\n      if (isOK) {\n        // 加入文件列表\n        this.fileList.push(fileJson)\n      }\n\n      return isOK\n    },\n    // 自定义上传\n    customRequest (data) {\n      // 找到对应的上传文件对象\n      const fileJson = this.fileList.find(item => {\n        return data.file.uid === item.uid\n      })\n      // 自定义上传服务器\n      if (this.customRequestPro) {\n        // 自定义请求 \n        this.customRequestPro(data, fileJson, (isSuccess) => {\n          const status = isSuccess ? 'done' : 'error'\n          this.customRequestResult(fileJson, status)\n        })\n      } else {\n        // this.$message.error('请自己实现 customRequestPro 自定义上传操作！')\n        // 上传完成\n        setTimeout(() => {\n          this.customRequestResult(fileJson, 'done')\n        }, 2000);\n      }\n    },\n    // 点击移除文件时的回调\n    remove (file) {\n      // 允许删除\n      var isOK = true\n      // 外传回调\n      if (this.removePro) {\n        // 获取回调结果\n        isOK = this.removePro(file) \n      }\n      // 检查结果\n      if (isOK) {\n        const index = this.fileList.indexOf(file)\n        this.fileList.splice(index, 1)\n      }\n      // 返回\n      return isOK\n    },\n    // 文件检测\n    fileCheck (file, fileList, uploadId) {\n\n      // 检测结果\n      var isOK = true\n\n      // ----------------------------- 公用检测 - 文件大小 --------\n      \n      // 开启了 - 文件大小检测\n      if (this.kbCompareMode !== 0) {\n        // 检测结果\n        var isOK = true\n        // 获取文件大小（单位：kb）\n        const fileSize = file.size / 1024\n        // 开始检测\n        if (this.kbCompareMode === 1) {\n          // 小于\n          isOK = fileSize < this.kbCompareSize\n        } else if (this.kbCompareMode === 2) {\n          // 大于\n          isOK = fileSize > this.kbCompareSize\n        } else if (this.kbCompareMode === 3) {\n          // 等于\n          isOK = fileSize === this.kbCompareSize\n        } else if (this.kbCompareMode === 11) {\n          // 小于等于\n          isOK = fileSize <= this.kbCompareSize\n        } else if (this.kbCompareMode === 22) {\n          // 大于等于\n          isOK = fileSize >= this.kbCompareSize\n        } else {}\n        // 判断检测结果\n        if (!isOK) {\n          // 有错误回调\n          if (this.kbCompareErrorPro) {\n            // 错误回调\n            this.kbCompareErrorPro(file, fileList, uploadId)\n          } else {\n            // 有错误文案\n            if (this.kbCompareError) { this.$message.error(this.kbCompareError) }\n          }\n          // 修改检测结果\n          isOK = false\n          // 返回错误状态\n          return isOK\n        }\n      }\n\n      // ----------------------------- 图片检查 --------\n\n      // 返回\n      return isOK\n    },\n    // 自定义上传结果\n    customRequestResult (fileJson, status) {\n      // 设置上传状态\n      fileJson.status = status\n    },\n    // 获取本次上传唯一ID\n    getUploadId (fileList) {\n      var uploadId = ''\n      fileList.forEach(item => {\n        uploadId += item.uid\n      })\n      return uploadId\n    }\n  }\n}\n</script>\n\n<style>\n\n</style>"],"sourceRoot":"src/components"}]}